apiVersion: v1
kind: Secret
metadata:
  name: umami-config
  namespace: koenverburg
type: Opaque
stringData:
  # Same password in pg-password and the middle of database-url
  pg-password: password
  database-url: "postgresql://umami:password@postgres:5432/umami"
  hash-salt: VfSW21cFVMchylhIHSS8H5WqROaGRTGMyH1cCdNCGig=
  # Generate hash-salt with `openssl rand -base64 32`

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-scripts
  namespace: koenverburg
data:
  # Copied from https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql
  schema.postgresql.sql: |
    -- CreateTable
    CREATE TABLE "account" (
        "user_id" SERIAL NOT NULL,
        "username" VARCHAR(255) NOT NULL,
        "password" VARCHAR(60) NOT NULL,
        "is_admin" BOOLEAN NOT NULL DEFAULT false,
        "created_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,

        PRIMARY KEY ("user_id")
    );

    -- CreateTable
    CREATE TABLE "event" (
        "event_id" SERIAL NOT NULL,
        "website_id" INTEGER NOT NULL,
        "session_id" INTEGER NOT NULL,
        "created_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,
        "url" VARCHAR(500) NOT NULL,
        "event_type" VARCHAR(50) NOT NULL,
        "event_value" VARCHAR(50) NOT NULL,

        PRIMARY KEY ("event_id")
    );

    -- CreateTable
    CREATE TABLE "pageview" (
        "view_id" SERIAL NOT NULL,
        "website_id" INTEGER NOT NULL,
        "session_id" INTEGER NOT NULL,
        "created_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,
        "url" VARCHAR(500) NOT NULL,
        "referrer" VARCHAR(500),

        PRIMARY KEY ("view_id")
    );

    -- CreateTable
    CREATE TABLE "session" (
        "session_id" SERIAL NOT NULL,
        "session_uuid" UUID NOT NULL,
        "website_id" INTEGER NOT NULL,
        "created_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,
        "hostname" VARCHAR(100),
        "browser" VARCHAR(20),
        "os" VARCHAR(20),
        "device" VARCHAR(20),
        "screen" VARCHAR(11),
        "language" VARCHAR(35),
        "country" CHAR(2),

        PRIMARY KEY ("session_id")
    );

    -- CreateTable
    CREATE TABLE "website" (
        "website_id" SERIAL NOT NULL,
        "website_uuid" UUID NOT NULL,
        "user_id" INTEGER NOT NULL,
        "name" VARCHAR(100) NOT NULL,
        "domain" VARCHAR(500),
        "share_id" VARCHAR(64),
        "created_at" TIMESTAMPTZ(6) DEFAULT CURRENT_TIMESTAMP,

        PRIMARY KEY ("website_id")
    );

    -- CreateIndex
    CREATE UNIQUE INDEX "account.username_unique" ON "account"("username");

    -- CreateIndex
    CREATE INDEX "event_created_at_idx" ON "event"("created_at");

    -- CreateIndex
    CREATE INDEX "event_session_id_idx" ON "event"("session_id");

    -- CreateIndex
    CREATE INDEX "event_website_id_idx" ON "event"("website_id");

    -- CreateIndex
    CREATE INDEX "pageview_created_at_idx" ON "pageview"("created_at");

    -- CreateIndex
    CREATE INDEX "pageview_session_id_idx" ON "pageview"("session_id");

    -- CreateIndex
    CREATE INDEX "pageview_website_id_created_at_idx" ON "pageview"("website_id", "created_at");

    -- CreateIndex
    CREATE INDEX "pageview_website_id_idx" ON "pageview"("website_id");

    -- CreateIndex
    CREATE INDEX "pageview_website_id_session_id_created_at_idx" ON "pageview"("website_id", "session_id", "created_at");

    -- CreateIndex
    CREATE UNIQUE INDEX "session.session_uuid_unique" ON "session"("session_uuid");

    -- CreateIndex
    CREATE INDEX "session_created_at_idx" ON "session"("created_at");

    -- CreateIndex
    CREATE INDEX "session_website_id_idx" ON "session"("website_id");

    -- CreateIndex
    CREATE UNIQUE INDEX "website.website_uuid_unique" ON "website"("website_uuid");

    -- CreateIndex
    CREATE UNIQUE INDEX "website.share_id_unique" ON "website"("share_id");

    -- CreateIndex
    CREATE INDEX "website_user_id_idx" ON "website"("user_id");

    -- AddForeignKey
    ALTER TABLE "event" ADD FOREIGN KEY ("session_id") REFERENCES "session"("session_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- AddForeignKey
    ALTER TABLE "event" ADD FOREIGN KEY ("website_id") REFERENCES "website"("website_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- AddForeignKey
    ALTER TABLE "pageview" ADD FOREIGN KEY ("session_id") REFERENCES "session"("session_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- AddForeignKey
    ALTER TABLE "pageview" ADD FOREIGN KEY ("website_id") REFERENCES "website"("website_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- AddForeignKey
    ALTER TABLE "session" ADD FOREIGN KEY ("website_id") REFERENCES "website"("website_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- AddForeignKey
    ALTER TABLE "website" ADD FOREIGN KEY ("user_id") REFERENCES "account"("user_id") ON DELETE CASCADE ON UPDATE CASCADE;

    -- CreateAdminUser
    INSERT INTO account (username, password, is_admin) values ('admin', '$2b$10$BUli0c.muyCW1ErNJc3jL.vFRFtFJWrT8/GcR4A.sUdCznaXiqFXa', true);

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: koenverburg
spec:
  ports:
  - port: 5432
    name: postgres
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: koenverburg
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: registry.hub.docker.com/library/postgres:14.1
        ports:
          - name: postgres
            containerPort: 5432

        env:
          - name: POSTGRES_USER
            value: umami

          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: umami-config
                key: pg-password

        volumeMounts:
          - name: initdb-scripts
            mountPath: "/docker-entrypoint-initdb.d/"

          # - name: pgdata
          #   mountPath: "/var/lib/postgresql/data"

      volumes:
        - name: initdb-scripts
          configMap:
            name: initdb-scripts
            items:
              - key: "schema.postgresql.sql"
                path: "schema.postgresql.sql"

  # volumeClaimTemplates:
  #   - metadata:
  #       name: pgdata
  #     spec:
  #       # storageClassName: "a-storage-class"
  #       accessModes: 
  #         - ReadWriteOnce
  #       resources:
  #         requests:
  #           storage: 2Gi
